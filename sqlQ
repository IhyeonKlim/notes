/*
허브대학교 1학년 1학기 코딩테스트 점수가 모두 채점되어 아래 DataBase Table에 Insert 되어있습니다.


이 때 , A등급은 90점 이상 , B등급은 80점 이상 , C등급은 70점 이상 , D등급은 60점 이상 
이 외 모든 점수는 F등급으로 매겨질 때, 학생의 이름과 등급을 가져오는 SQL문을 작성해주세요.


- 단 , 결석 회수가 4회 이상인 학생은 무조건 F등급입니다.
- 모든 데이터는 null 값이 허용되지 않습니다.
- 코딩테스트 점수 테이블


name(이름)	score(성적)	absent(결석회수)
홍길동	95	1
춘향이	72	0
심청이	85	3
심봉사	90	4
콩쥐	65	0
팥쥐	52	1
---------------------------------
select 
    name, 
    case 
        when absent = 4 then 'F'
        when score >= 90 then 'A'
        when score >= 80 then 'B'
        when score >= 70 then 'C'
        when score >= 60 then 'D'
        else 'F'
        end as rank
    from "Table"
*/

/*
아래 테이블은 A 회사의 공지사항 테이블입니다.
이 테이블에서 부서별 최신 공지사항의 제목, 조회수, 게시일을 가져오는 SQL문을 작성해주세요.

- 모든 데이터는 null 값이 허용되지 않습니다.

idx
(고유번호)	title
(제목)	notice_dept
(부서)	post_date
(게시일)	view_count
(조회수)
1	개발팀 전체 공지	개발팀	2023-01-05 00:00:00	205
2	기획팀 전체 공지	기획팀	2023-01-20 00:00:00	98
3	디자인팀 공유 사이트 공지	디자인팀	2023-01-29 00:00:00	150
4	회계팀 Q 컨퍼런스 정리 공지	회게팀	2023-02-05 00:00:00	135
5	개발팀 Y 프로젝트 미팅 공지	개발팀	2023-02-06 00:00:00	86
6	디자인팀 X 프로젝트 미팅 공지	디자인팀	2023-02-06 00:00:00	52
*/

select 
    title, 
    view_count, 
    post_date 
    from "Table"
    order by post_date desc;


/*
수많은 공룡들이 화산을 피해 도망을 가고 있었습니다.
단 한 마리의 공룡을 제외하고는 모든 공룡들이 동굴로 피신을 했습니다.
동굴로 이동했던 공룡들의 이름이 담긴 배열 participant와 안전하게 피신온 공룡들의 이름이 담긴 배열 completion이 주어질 때, 피신을 오지 못한 공룡의 이름을 return 하도록 코드를 작성해 주세요.

- 동굴로 피신하는 공룡들의 수는 1명 이상 100,000명 이하입니다.
- 공룡의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.
- 공룡 중에는 같은 종이 있을 수 있습니다.

participant	completion	return
[’트리케라톱스’, ‘티라노사우루스’, ‘바리오닉스’]	[’바리오닉스’, ‘티라노사우루스’]	‘트리케라톱스’
[’티라노사우루스’, ‘파키케팔로사우루스’, ‘티라노사우루스’, ‘스테고사우루스’]	[’파키케팔로사우루스,‘스테고사우루스’, ‘티라노사우루스’’]	‘티라노사우루스’
*/

/*
    시간복잡도를 빅오로 표현할 수 있는 코드를 작성해라?


    시간복잡도는 빠른 순서대로 O(1), O(logN), O(N), O(NlogN), O(N^), O(C^N), O(N!)이 있다.

    faster? less memory-intensive?

    n=100이라 가정하면
    O(1) = 1
    O(log1000) = 약 10
    O(1000) = 1000
    O(1000log1000) = 약10000
    O(1000) = 1000000
    O(1000^1000) = 1000000000
    O(2^1000) = 1.07 * 10^301
    O(1000!) = 4.02 * 10^2567
    의 확연한 차이를 볼 수 있다.

    function addUpTo(n){
        let total = 0;
        for(let i = 1; i <= n; i++){
            total += i;    
        }
        return total;
    }
    function addUpTo2(n){
        return n * (n+1)/2;    
    }
    function addUpTO(n){
        for(){
            for(){
            }
        }
    }
let t1 = performance.now();
addUpTo(1000000000); //10억
let t2 = performance.now();
console.log(`time elapesd : ${t2-t1)/1000} sec`);

`operation 
first count N의 값에 관련없음.
second n이 n값에 따라 개수가 늘어남.

f(n) = n
f(n) = n^2
f(n) = 1
`

상수 , 변수배정,array-index, loop,

space complex.

*/  















--배열을 문자열로

CREATE OR REPLACE TYPE VARCHAR_ARR is VARRAY(50) OF VARCHAR2(200);

CREATE OR REPLACE FUNCTION P2F_ARR2STR(
in_arr VARCHAR_ARR,
in_delimiter VARCHAR2
)
RETURN VARCHAR2
AS
	lo_rtn VARCHAR2(32767)
BEGIN
	for i in in_arr.first..in_arr.last LOOP
		if i != in_arr.first then
		lo_rtn := lo_rtn||in_delimiter;
		end if;
		lo_rtn := lo_rtn||in_arr(i);
	END LOOP;
	RETURN lo_rtn;
End;


--문자열을 배열로

CREATE OR REPLACE FUNCTION P2F_STR2ARR(
	in_strSrc VARCHAR2,
	in_delimiter VARCHAR2
)
RETURN VARCHAR_ARR
AS
	lm_strArr VARCHAR_ARR := VARCHAR_ARR();
	CURSOR c_list(v_strSrc IN VARCHAR2,v_delimiter IN VARCHAR2) IS
	select regexp_substr(v_strSrc,'[^'||v_delimiter||']+', 1, level) as val
	from dual
	connect by regexp_substr(v_strSrc,'[^'||v_delimiter||']+', 1, level) is not null;
BEGIN
	FOR i IN c_list(in_strSrc, in_delimiter) LOOP
		lm_strArr.extend;
		 lm_strArr( lm_strArr.count) := i.val;
	END LOOP;
	RETURN lm_strArr;
End;


SELECT REGEXP_SUBSTR(a.langList, '[^|]+', 1, LEVEL) AS split_result
   FROM (SELECT 'Java|Kotlin|Python|Swift' AS langList 
           FROM dual) a
CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(a.langList, '[^|]+','')) + 1



create or replace type string_array as table of varchar2(100);

create or replace procedure dinosaur.get_name ( 
	participant in string_array
)
as
begin
	for i in 1 ..participant.count loop
	 insert into participant values(participant(i));
	end loop;
end;



	return varchar2 is  inevitable_name varchar2(10)
begin
	if participant is null or participant = null
		inevitable_name := null;
	else
	  select name
	  into inevitable_name 
		from (
			select participant from dual
			minus
			select completion from "table"
		)
	end if;
	return inevitable_name 
exception
	when others then
		return '없음';
	end get_name

